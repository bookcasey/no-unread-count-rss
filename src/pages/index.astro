---
import Layout from "../layouts/Layout.astro";
import Parser from "rss-parser";
let parser = new Parser();

import urls from "../../feeds.json";

const data = await Promise.all(
	urls.map(async (url) => {
		const feed = await parser.parseURL(url);

		return feed.items.map((item) => {
			return {
				guid: item.guid,
				title: item.title,
				creator: item.creator,
				link: item.link,
				content: item.content,
				pubDate: item.pubDate,
			};
		});
	}),
);

const articles = data
	.flat()
	.sort((a, b) => new Date(b.pubDate) - new Date(a.pubDate));
---

<Layout title="RSS feed">
	<main>
		<ul>
			{
				articles.map((article) => (
					<li id={article.guid}>
						<h2>
							<a target="_blank" href={article.link}>
								{article.title}
							</a>
						</h2>
						<section>
							<div>{article.creator}</div>
							<div>
								{new Date(article.pubDate).toLocaleDateString()}
							</div>
						</section>
					</li>
				))
			}
		</ul>
		<footer>
			<button>Reset scroll position</button>
		</footer>
	</main>
</Layout>

<script>
	const key = "current";

	const ids = [...document.querySelectorAll("li")].map((node) => node.id);

	function findIndex(x: string) {
		return ids.findIndex((id) => id === x);
	}

	const observer = new IntersectionObserver(
		(entries) => {
			entries.forEach((entry) => {
				const intersecting = entry.isIntersecting;
				if (intersecting) {
					observer.unobserve(entry.target);

					const stored = localStorage.getItem(key);

					// In the case of multiple active sessions,
					// this check prevents old session from updating incorrectly.
					if (
						!stored ||
						findIndex(entry.target.id) < findIndex(stored)
					)
						localStorage.setItem(key, entry.target.id);
				}
			});
		},
		{
			threshold: 0.9,
		},
	);

	const last = ids[ids.length - 1];

	const id = localStorage.getItem(key) || last;

	if (window.history.scrollRestoration)
		window.history.scrollRestoration = "manual";
	document.getElementById(id)?.scrollIntoView();

	const ids_before_current = ids.slice(0, ids.indexOf(id));

	const observe = (
		items: string[],
		method: "observe" | "unobserve" = "observe",
	) => {
		items.forEach((item) => {
			const element = document.getElementById(item);
			if (element) observer[method](element);
		});
	};

	observe(ids_before_current);

	document.querySelector("footer button")?.addEventListener("click", () => {
		localStorage.setItem(key, last);
		// Remove and then re-add all event handlers
		observe(ids_before_current, "unobserve");
		document.getElementById(last)?.scrollIntoView();
		observe(ids);
	});
</script>

<style>
	main {
		max-width: 30rem;
		margin: 0 auto;
	}

	footer {
		height: 100vh;
	}

	h2 {
		margin-bottom: 0.5rem;
	}

	ul {
		padding: 2rem;
		list-style-type: none;
	}

	a {
		text-decoration: none;
	}

	section {
		display: flex;
		justify-content: space-between;
	}
</style>

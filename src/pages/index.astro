---
import Layout from "../layouts/Layout.astro";
import Parser from "rss-parser";

const simpleHash = (str: string) => {
	let hash = 0;
	for (let i = 0; i < str.length; i++) {
		const char = str.charCodeAt(i);
		hash = (hash << 5) - hash + char;
	}
	return hash;
};

let parser = new Parser();

const urls = [
	"https://lloydalter.substack.com/feed",
	"https://www.construction-physics.com/feed",
	"https://climate.benjames.io/posts/rss",
];

function dateWithoutTime(str: string) {
	return new Date(new Date(str).toDateString());
}

const data = await Promise.all(
	urls.map(async (url) => {
		const feed = await parser.parseURL(url);

		return feed.items.map((item) => {
			return {
				hash: simpleHash(item.guid),
				title: item.title,
				creator: item.creator,
				link: item.link,
				content: item.content,
				pubDate: item.pubDate,
			};
		});
	}),
);

// In order to divide into dates, we need to know the timezone of the user...
const dates = Object.entries(
	data.flat().reduce<Record<string, object[]>>((acc, article) => {
		if (!article.pubDate) return acc;
		(acc[dateWithoutTime(article.pubDate).toISOString()] ??= []).push(
			article,
		); // Logical nullish assignment operator, who knew
		return acc;
	}, {}),
)
	.map(([date, article]) => ({
		date,
		articles: article.sort(
			(a, b) => new Date(b.pubDate) - new Date(a.pubDate),
		),
	}))
	.sort((a, b) => new Date(b.date) - new Date(a.date));
---

<Layout title="Welcome to Astro.">
	<main>
		<ul>
			{
				dates.map((date) => (
					<li><h2>{new Date(date.date).toLocaleDateString()}<h2>
						<ul>
							{
						date.articles.map((article) => (
					<li id={article.hash.toString()}>
						<h3>
							<a href={article.link}>{article.title}</a>
						</h3>
						<p>
							{article.creator} - {new Date(article.pubDate).toLocaleDateString()}
						</p>
					</li>
				))
			}
						</ul>
					</li>
				))
			}
			<!-- {
				articles.map((article) => (
					<li id={article.hash.toString()}>
						<h2>
							<a href={article.link}>{article.title}</a>
						</h2>
						<p>
							{new Date(article.pubDate).toLocaleDateString()} -{" "}
							{article.content}
						</p>
					</li>
				))
			} -->
		</ul>
		<footer><button>Reset scroll position</button></footer>
	</main>
</Layout>

<script>
	const localStorageKey = "current";

	const observer = new IntersectionObserver(
		(entries) => {
			entries.forEach((entry) => {
				const intersecting = entry.isIntersecting;
				if (intersecting) {
					observer.unobserve(entry.target);
					localStorage.setItem(localStorageKey, entry.target.id);
				}
			});
		},
		{
			threshold: 0.8,
		},
	);

	const ids = [...document.querySelectorAll("li")].map((node) => node.id);

	const last = ids[ids.length - 1];

	const id = localStorage.getItem(localStorageKey);

	location.href = `#${id && document.getElementById(id) ? id : last}`;

	const ids_before_current = ids.slice(0, ids.indexOf(id));

	ids_before_current.map((id) => {
		const element = document.getElementById(id);
		if (element) observer.observe(element);
	});

	document.querySelector("footer button")?.addEventListener("click", () => {
		localStorage.setItem(localStorageKey, last);
		location.href = `#${last}`;
		location.reload(); // Would be better to reinit Intersection Observer manually
	});
</script>

<style>
	footer {
		height: 100vh;
	}
</style>
